<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".txt" #>

<#
	// 从Github下载，此模板可能出错，请将\n转\r\n
    //------------------------- 以下为 设置信息 --------------------------------------
    // 输出命名空间
    string nameSpace="ToolGood.Datas";
    // 原类前缀
    string oldClassPrefix="Db";
    // 新类前缀
    string newClassPrefix="";
    // 初始化默认连接字符串名称
    string connectionStringName="";
    // 初始化默认SqlHelper获取方式,当上面没设置时有效
    string sqlHelper="";

    //------------------------- 以下为 模板代码 --------------------------------------
	var baseInitString=connectionStringName==""?sqlHelper:connectionStringName;
    this.VisualStudioHelper = new AutomationHelper(this.Host);
    var project = VisualStudioHelper.CurrentProject;
    var allClasses = VisualStudioHelper.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, true);
    allClasses.RemoveAll(q=> q.Name.StartsWith(oldClassPrefix)==false);
    allClasses=allClasses.OrderBy(q=>q.FullName).ToList();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ToolGood.ReadyGo3;
using ToolGood.ReadyGo3.Attributes;
using ToolGood.ReadyGo3.DataCentxt;

namespace <#=        nameSpace #>
{
<#    foreach(EnvDTE80.CodeClass2 codeClass in allClasses){ #>
    public class Up<#=            GetClass(codeClass,oldClassPrefix,newClassPrefix) #> : ToolGood.Infrastructure.IUpdateBase
    {
<#      var allProperty = VisualStudioHelper.GetAllCodeElementsOfType(codeClass.Members, EnvDTE.vsCMElement.vsCMElementProperty, true); 
        var pis =new List<EnvDTE80.CodeProperty2>();
        foreach  (EnvDTE80.CodeProperty2 pi in allProperty) {
            if(pi.ReadWrite==EnvDTE80.vsCMPropertyKind.vsCMPropertyKindReadWrite){
            if (pi.Access== EnvDTE.vsCMAccess.vsCMAccessPublic) {
                    pis.Add(pi);
                }
            }
        } #>
<#        foreach  (EnvDTE.CodeProperty pi in pis) { #>
<#            if(IsResultColumn(pi)==false){ #>
        <#=                GetSummary(pi.DocComment) #>
 		public <#= pi.Type.AsString #> <#= pi.Name #> { set { SetValue("<#= pi.Name #>",value); } get { return GetValue<<#= pi.Type.AsString #>>("<#= pi.Name #>"); } }
 <#            } #>
<#        } #>

    }

<#    } #>
}





<#+
    public string GetClass(EnvDTE.CodeClass codeClass,string oldClassPrefix,string newClassPrefix){
        return newClassPrefix+  codeClass.Name.Substring(oldClassPrefix.Length).Trim();
    }
    public string GetSummary(string docComment){
        if (docComment.Length==0) return docComment;

        docComment= docComment.Substring("<doc>".Length);
        docComment=docComment.Substring(0,docComment.Length-"</doc>".Length);
        docComment=docComment.Trim();
        docComment="///"+ docComment.Replace("\r\n","\n").Replace("\r","\n").Replace("\n","\r\n        ///");
        return docComment;
    }
    public string GetSchemaName(EnvDTE.CodeClass codeClass){
        foreach(EnvDTE80.CodeAttribute2 code in codeClass.Attributes){
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.TableAttribute"){
                int index=0;
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    index++;
                    if  (index==2){
                        return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                    }
                }
            }
        }
        return "";
    }
    public string GetTableName(EnvDTE.CodeClass codeClass){
        foreach(EnvDTE80.CodeAttribute2 code in codeClass.Attributes){
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.TableAttribute"){
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                }
            }
        }
        return "";
    }
    public string GetPrimaryKeyName(EnvDTE.CodeClass codeClass){
        foreach(EnvDTE80.CodeAttribute2 code in codeClass.Attributes){
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.PrimaryKeyAttribute"){
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                }
            }
        }
        return "";
    }
    public bool IsResultColumn(EnvDTE.CodeProperty pi){
        foreach(EnvDTE80.CodeAttribute2 code in pi.Attributes){
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.ResultColumnAttribute"){
                return true;
            }
        }
        return false;
    }
    public string GetColumnName(EnvDTE.CodeProperty pi){
        foreach(EnvDTE80.CodeAttribute2 code in pi.Attributes){
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.ColumnAttribute"){
                if(code.Arguments.Count==0) {return pi.Name;}
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                }
            }
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.NotQueryColumnAttribute"){
                if(code.Arguments.Count==0) {return pi.Name;}
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                }
            }
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.ResultColumnAttribute"){
                if(code.Arguments.Count==0) {return pi.Name;}
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                }
            }
        }
        return pi.Name;
    }
    public string GetPkFlag(EnvDTE.CodeProperty pi,EnvDTE.CodeClass codeClass){
        List<string> pkNames=new List<string>();
        var pk= GetPrimaryKeyName(codeClass);
        if(pk!=""){
            pkNames.Add(pk);
        } else {
            pkNames.Add("id");
            pkNames.Add(codeClass.Name.ToLower()+"id");
            pkNames.Add(codeClass.Name.ToLower()+"_id");
            pkNames.Add(GetTableName(codeClass).ToLower()+"id");
            pkNames.Add(GetTableName(codeClass).ToLower()+"_id");
        }
        var columnName=GetColumnName(pi).ToLower();
        if (pkNames.Contains(columnName)){
            return "true";
        }
        return "false";
    }
    public string GetResultSql(EnvDTE.CodeProperty pi){
        foreach(EnvDTE80.CodeAttribute2 code in pi.Attributes){
            if(code.FullName=="ToolGood.ReadyGo3.Attributes.ResultColumnAttribute"){
                int index=0;
                foreach(EnvDTE80.CodeAttributeArgument ce in code.Arguments){
                    index++;
                    if  (index==2){
                        return ce.Value.Substring(1,ce.Value.Length-2).Trim();
                    }
                }
            }
        }
        return "";
    }

#>



<#+
    /// <summary>
    /// Object that provides functionality for automating Visual Studio.
    /// </summary>
    public AutomationHelper VisualStudioHelper;

    /// <summary>
    /// This class provides functionality for automating Visual Studio.
    /// </summary>
    public class AutomationHelper 
    {
        /// <summary>
        /// Creates a new instance of this class
        /// </summary>
        public AutomationHelper(object host)
        {
            // store a reference to the template host
            // we will need this frequently
            this.Host = host as ITextTemplatingEngineHost;
        }
	
        private EnvDTE.DTE _DTE = null;
        /// <summary>
        /// Returns a reference to the primary management object of Visual Studio
        /// <summary>
        public EnvDTE.DTE DTE
        {
            get
            {
                if (_DTE == null)
                {
                    var hostServiceProvider = this.Host as IServiceProvider;
                    if (hostServiceProvider != null)
                        _DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
                }
                return _DTE;
            }
        }
	
        /// <summary>
        /// Stores a reference to the Host of the t4 template
        /// </summary>
        public ITextTemplatingEngineHost Host { get; private set; }


        #region Solution and Projects
        /// <summary>
        /// Gets the full path of the solution file
        /// </summary>
        public string SolutionFile
        {
            get
            {
                return this.DTE.Solution.FileName;
            }
        }
        /// <summary>
        /// Gets the file name of the currently opened solution.
        /// </summary>
        public string SolutionFileName
        {
            get
            {
                return System.IO.Path.GetFileName(this.DTE.Solution.FileName);
            }
        }
        /// <summary>
        /// Gets the name of the currently opened solution
        /// </summary>
        public string SolutionName
        {
            get
            {
                return this.DTE.Solution.Properties.Item("Name").Value.ToString();
            }
        }

        /// <summary>
        /// Gets a list of all Projects within the solution
        /// </summary>
        public IEnumerable<EnvDTE.Project> GetAllProjects()
        {
            var ret = new List<EnvDTE.Project>();

            // take all projects that are at top level of the solution
            // and recursively search Project folders
            var topLevelProjects = this.DTE.Solution.Projects;

            foreach(EnvDTE.Project project in topLevelProjects)
            {
                if (project.Kind == vsProjectType.SolutionFolder)
                    ret.AddRange(GetProjectsFromItemsCollection(project.ProjectItems));
                else
                    ret.Add(project);
            }

            return ret;
        }
        /// <summary>
        /// Gets the project object within the current solution by a given project name.
        /// </summary>
        public EnvDTE.Project GetProject(string projectName)
        {
            return this.GetAllProjects()
                .Where(p => p.Name == projectName)
                .First();
        }
        /// <summary>
        /// Gets the project containing the .tt-File
        /// </summary>
        public EnvDTE.Project CurrentProject
        {
            get
            {
                return this.FindProjectItem(this.Host.TemplateFile).ContainingProject;
            }
        }
        #endregion

        #region Project Items
        public EnvDTE.ProjectItem FindProjectItem(string fileName)
        {
            return this.DTE.Solution.FindProjectItem(fileName);
        }
        /// <summary>
        /// Gets all project items from the current solution
        /// </summary>
        public IEnumerable<EnvDTE.ProjectItem>GetAllSolutionItems()
        {
            var ret = new List<EnvDTE.ProjectItem>();

            // iterate all projects and add their items
            foreach(EnvDTE.Project project in this.GetAllProjects())
                ret.AddRange(GetAllProjectItems(project));

            return ret;
        }
        /// <summary>
        /// Gets all project items from the current project
        /// </summary>
        public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems()
        {
            // get the project of the template file and reeturn all its items
            var project = this.CurrentProject;
            return GetAllProjectItems(project);
        }
        /// <summary>
        /// Gets all Project items from a given project. 
        /// </summary>
        public IEnumerable<EnvDTE.ProjectItem>GetAllProjectItems(EnvDTE.Project project)
        {
            return this.GetProjectItemsRecursively(project.ProjectItems);
        }
        #endregion

        #region Code Model
        /// <summary>
        /// Searches a given collection of CodeElements recursively for objects of the given elementType.
        /// </summary>
        /// <param name="elements">Collection of CodeElements to recursively search for matching objects in.</param>
        /// <param name="elementType">Objects of this CodeModelElement-Type will be returned.</param>
        /// <param name="includeExternalTypes">If set to true objects that are not part of this solution are retrieved, too. E.g. the INotifyPropertyChanged interface from the System.ComponentModel namespace.</param>
        /// <returns>A list of CodeElement objects matching the desired elementType.</returns>
        public List<EnvDTE.CodeElement> GetAllCodeElementsOfType(EnvDTE.CodeElements elements, EnvDTE.vsCMElement elementType, bool includeExternalTypes)
        {
            var ret = new List<EnvDTE.CodeElement>();

            foreach (EnvDTE.CodeElement elem in elements)
            {
				if(elem.Name=="System"){ continue; }
				if(elem.Name=="Microsoft"){ continue; }
				if(elem.Name=="Internal"){ continue; }
				if(elem.Name=="FxResources"){ continue; }
				if(elem.Name=="-"){ continue; }
				

                // iterate all namespaces (even if they are external)
                // > they might contain project code
                if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace)
                {
                    ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeNamespace)elem).Members, elementType, includeExternalTypes));
                }
                    // if its not a namespace but external
                    // > ignore it
                else if (elem.InfoLocation == EnvDTE.vsCMInfoLocation.vsCMInfoLocationExternal
                    && !includeExternalTypes)
                    continue;
                    // if its from the project
                    // > check its members
                else if (elem.IsCodeType)
                {
                    ret.AddRange(GetAllCodeElementsOfType(((EnvDTE.CodeType)elem).Members, elementType, includeExternalTypes));
                }

                // if this item is of the desired type
                // > store it
                if (elem.Kind == elementType)
                    ret.Add(elem);
            }

            return ret;
        }
        #endregion


        #region Auxiliary stuff
        private List<EnvDTE.Project> GetProjectsFromItemsCollection(EnvDTE.ProjectItems items)
        {
            var ret = new List<EnvDTE.Project>();

            foreach(EnvDTE.ProjectItem item in items)
            {
                if (item.SubProject == null)
                    continue;
                else if (item.SubProject.Kind == vsProjectType.SolutionFolder)
                    ret.AddRange(GetProjectsFromItemsCollection(item.SubProject.ProjectItems));
                else if (item.SubProject.Kind == vsProjectType.VisualBasic
                    || item.SubProject.Kind == vsProjectType.VisualCPlusPlus
                    || item.SubProject.Kind == vsProjectType.VisualCSharp
                    || item.SubProject.Kind == vsProjectType.VisualJSharp
                    || item.SubProject.Kind == vsProjectType.WebProject)
                    ret.Add(item.SubProject);
            }

            return ret;
        }
        private List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
        {
            var ret = new List<EnvDTE.ProjectItem>();
            if (items == null) return ret;
		
            foreach(EnvDTE.ProjectItem item in items)
            {
                ret.Add(item);
                ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
            }

            return ret;
        }
        #endregion
		
    }
    
    public class vsProjectType
    {
        public const string SolutionFolder = "{66A26720-8FB5-11D2-AA7E-00C04F688DDE}";
        public const string VisualBasic = "{F184B08F-C81C-45F6-A57F-5ABD9991F28F}";
        public const string VisualCSharp = "{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}";
        public const string VisualCPlusPlus = "{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}";
        public const string VisualJSharp = "{E6FDF86B-F3D1-11D4-8576-0002A516ECE8}";
        public const string WebProject = "{E24C65DC-7377-472b-9ABA-BC803B73C61A}";
    }
#>
