
@{
    ViewData["Title"] = "NewQuery";
    Layout = "~/Views/Shared/_Layout_Edit_New.cshtml";
    var serverName = ViewData["serverName"].ToString();
    var databaseName = ViewData["databaseName"].ToString();
    var databaseNames = ViewData["databaseNames"] as List<DatabaseInfoDto>;

}
@section css{
    <link href="~/_/vs/editor/editor.main.css" rel="stylesheet" />
    <style>
        body { overflow: hidden; }
        #footer { position: fixed; bottom: 0; left: 0; width: 100%; height: 200px; background-color: transparent; }
        #expander { width: 100%; height: 2px; background-color: #bbb; }
            #expander:hover { cursor: n-resize; }
        #info-tab .layui-tab { margin: 3px 0; }
        #info-tab .layui-tab-title { padding-left: 0; height: 20px; }
            #info-tab .layui-tab-title li { font-size: 12px; line-height: 20px; padding: 0; }
                #info-tab .layui-tab-title li::after { height: 21px; }
                #info-tab .layui-tab-title li.layui-this { font-weight: bold; }
        #info-tab .layui-tab-content { padding: 7px; }
        #hiddenTab { position: absolute; right: 5px; top: 0px; line-height: 30px; vertical-align: middle; height: 30px; font-size: 25px; }
        .layui-tab-item p { font-size: 13px; }
        div.search-v2 { padding: 0 5px; }
        #header { line-height: 0; }
        div.layui-form, table.layui-table { margin: 0; padding: 0; }
        /*table.layui-table thead tr th { font-weight: bold; }*/
        div.layui-table-cell { padding: 0 10px; }
    </style>
}
<div id="header" class="data-header" style="margin-bottom:0;">
    <div class="search-v2" style="line-height:initial;display:inline-block;margin-bottom:0;">
        <form method="get" id="searchForm">
            <div class="filter" style="height:auto;line-height:initial;">
                <label class="label">服务器名</label>
                <input type="text" class="text" placeholder="" name="serverName" id="serverName" value="@(serverName)" readonly style="margin-left:0">
            </div>
            <div class="filter" style="height:auto;line-height:initial;">
                <label class="label">数据库</label>
                <select name="databaseName" id="databaseName" style="margin-left:0">
                    @(databaseNames.ToOption(q => q.DatabaseName, databaseName))
                </select>
            </div>
            <button type="button" onclick="runSql()" class="layui-btn layui-btn-xs layui-btn-normal" style="height: 24px;line-height: 24px;">
                &nbsp;  <i class="fa fa-play"></i>
                运行 &nbsp;
            </button>

            <button type="button" onclick="runAllSql()" class="layui-btn layui-btn-xs layui-btn-normal" style="height: 24px;line-height: 24px;">
                &nbsp;   <i class="fa fa-play"></i>
                全部运行 &nbsp;
            </button>
        </form>
    </div>
</div>
<hr style="margin:0;" />

<div id="content" class="data-content" style="width:100%;overflow:hidden">
    <div id="container" style="width:100%;height:100%"></div>
</div>
<div id="footer" style="display:none;">
    <div id="expander"></div>
    <div id="info" style="width:100%">
        <div id="info-tab" class="layui-tab layui-tab-brief" lay-filter="log-tab">
            <ul id="info-tab-title" class="layui-tab-title">
                <li class="layui-this" lay-id="0">操作日志</li>
            </ul>
            <div class="layui-tab-content" style="height: 100px;">
                <div class="layui-tab-item layui-show" lay-id="0"></div>
            </div>
            <div id="hiddenTab"><a href="javascript:;" onclick="hiddenTab()">☒</a></div>
        </div>

    </div>
</div>

@section js{

    <script src="/_/vs/loader.js"></script>

    <script>
        var _monaco = {};
        var _editor = {};
        $(function () {
            $("#serverName").css("width", ($("#serverName").val().length * 16 + 10) + "px");

            require.config({ paths: { 'vs': '/_/vs' } });
            //require.config({ 'vs/nls': { availableLanguages: { '*': 'zh-cn' } } });
            require(['vs/editor/editor.main'], function () {
                _monaco = monaco;
                _editor = monaco.editor.create(document.getElementById("container"), {
                    language: "sql",
                    automaticLayout: true,
                    mouseWheelZoom: false,
                    smoothScrolling: true,
                    minimap: { enabled: false }

                });
                function createCompleters() {
                    return [
                        {
                            label: 'customFunction1',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "My first Custom Function",
                            detail: "My first Custom Function",
                            insertText: 'customFunction1()'
                        },
                        {
                            label: 'this',
                            kind: monaco.languages.CompletionItemKind.Class,
                            filterText: "bbb",
                            documentation: "My first Custom Function",
                        },
                        {
                            label: 'kkk',
                            kind: monaco.languages.CompletionItemKind.Field,
                            documentation: "My first Custom Function",
                        },
                        {
                            label: 'aaa',
                            kind: monaco.languages.CompletionItemKind.Snippet,
                            detail: "aaa",
                            filterText: ".",
                            documentation: "My first Custom Function",
                            insertText: "aaaa$1bbbb$2cccc"
                        },
                        {
                            label: 'customFunction2',
                            kind: monaco.languages.CompletionItemKind.Function,
                            documentation: "My second Custom Function",
                            insertText: 'customFunction2()'
                        }
                    ];
                }
                monaco.languages.registerCompletionItemProvider('sql', {
                    provideCompletionItems: function (model, position) {
                        var text = model.getValue();
                        var sql = getCurrentSql(position, text);
                        console.log(sql);
                        //console.log(text);
                        return createCompleters();
                    }
                });
            });
            $("#content").height($("body").height() - $("#header").height() - 1);


        });


    </script>
    @* 自动提示 *@
    <script>
        var sqlKeywordList = [];
        var databaseList = @(databaseNames.Select(q=>q.DatabaseName).ToJson());
        var tableList = [];
        var tempTableList = [];
        function autoCompleteKeyword(databaseName, tableName) {


        }

        function autoCompleteKeyword(position, sql, text) {

        }

        function getSqlPosition(position, sql) {
            //select from join where order by group by having update delete insert subSelect  call Create



        }


        function getTempTableList(sql) {

        }

        function getCurrentSql() {
            var position = _editor.getPosition();
            var allSql = clearSql(_editor.getValue());
            var index = getIndexByPosition(position, allSql);
            return getSql(index, allSql);
        }

        function getSql(index, sql) {
            var start = 0;
            var end = sql.length - 1;
            var keys = splitKeyword(sql);

            var idx = 0;
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key==";") {
                    if (idx <= index) {
                        start = idx + 1;
                    }
                    if (idx > index && idx + 1 < end) {
                        end = idx + 1;
                    }
                    idx++;
                } else {
                    idx += key.length;
                }
            }
            return sql.substring(start, end).trim();
        }

        function getIndexByPosition(position,sql) {
            var col = position.column - 1;
            var line = position.lineNumber - 1;
            if (line == 0) { return col; }

            var index = 0, c = 0, l = 0;
            while (index < sql.length) {
                var ch = sql[index];
                if (col == c && l == line) { return index; }
                if (ch == "\n") { l++ , c = 0; } else { c++; }
                index++;
            }
        }
        function clearSql(sql) {
            return sql.replace(/\r\n/g, "\n").replace(/\r/g, "\n").replace(/[\t\f\v]/g, " ") + "\n";
        }
        function splitKeyword(sql) {
            var regex = /(?:"(?:\\\"|[^"])*"|'(?:\\\'|[^'])*'|`(?:\\\`|[^`])*`|<>|!=|>=|<=| +|[,'"`;\n<>=!]|(?:\-\-|#).*\n|\/\*[\s\S]*?\*\/|[^ ,'"`;<>=!]+)/ig;
            return sql.match(regex);
        }

    </script>

    @* build Kind *@
    <script>
        function buildFunctionKind(label, documentation, insertText) {
            return {
                label: label,
                kind: _monaco.languages.CompletionItemKind.Function,
                documentation: documentation,
                insertText: insertText
            };
        }
        function buildKeywordKind(label, documentation) {
            return {
                label: label,
                kind: _monaco.languages.CompletionItemKind.Keyword,
                documentation: documentation,
            };
        }
        function buildTextKind(label, documentation) {
            return {
                label: label,
                kind: _monaco.languages.CompletionItemKind.Text,
                documentation: documentation,
            };
        }
        function buildValueKind(label, documentation) {
            return {
                label: label,
                kind: _monaco.languages.CompletionItemKind.Value,
                documentation: documentation,
            };
        }
        function buildSnippetKind(label, documentation, insertText) {
            return {
                label: label,
                kind: _monaco.languages.CompletionItemKind.Snippet,
                documentation: documentation,
                insertText: insertText
            };
        }
    </script>

    @* 运行SQL语句 *@
    <script>
        layui.use(['table', 'element', 'form', 'layer'], function () { });
        function runSql() {
            var sql = _editor.getModel().getValueInRange(_editor.getSelection());
            if (sql.length == 0) { sql = _editor.getValue(); }
            postSql(sql);
        }
        function runAllSql() {
            var sql = _editor.getValue();
            postSql(sql);
        }
        function postSql(sql) {
            var serverName = $("#serverName").val();
            var databaseName = $("#databaseName").val();
            var url = "/SqlQuery/Main/runSql"
            var data = { serverName: serverName, databaseName: databaseName, sql: sql };
            clearTab();
            PostUrl(url, data, function (data) {
                dataHandle(data);
                showTab();
            }, function () {
                addOperateLog("连接出错了！！！");
                showTab();
            });
        }
        function addOperateLog(log) {
            var html = $("#info-tab .layui-tab-content div[lay-id=0]").html();
            html += "<p>" + log + "</p>";
            $("#info-tab .layui-tab-content div[lay-id=0]").html(html);
        }
        function clearTab() {
            $("#info-tab .layui-tab-title li[lay-id!=0]").remove();
            $("#info-tab .layui-tab-content div[lay-id!=0]").remove();
            $("#info-tab .layui-tab-content div[lay-id=0]").html("<p>开始执行SQL ...</p>");
        }
        function hiddenTab() {
            $("#content").height($("body").height() - $("#header").height());
            $("#footer").css("display", "none");
        }
        function showTab() {
            var destHeight = $("#footer").height();
            $("#footer").css("display", "");
            $("#content").height($("body").height() - $("#header").height() - destHeight);
        }
        function setAddDataTab(id, name, content) {
            var element = layui.element;
            element.tabAdd('log-tab', { title: name, content: content, id: id });
            element.tabChange('log-tab', "0");
         }
        function dataHandle(data) {
            if (data.code !=@SuccessCode) {
                addOperateLog("异常信息：" + data.msg);
            } else if (data.result.success == false) {
                if (data.result.exception) {
                    addOperateLog("[SQL]" + data.result.sql);
                    addOperateLog("异常信息：" + data.result.exception);
                } else {
                    addOperateLog("[SQL]" + data.result.sql);
                    addOperateLog("出错了！");
                }
            } else {
                addOperateLog("[SQL]" + data.result.sql);
                addOperateLog("开始时间：" + data.result.startTime);
                addOperateLog("运行时间：" + data.result.runTime + "ms");

                var index = 1;
                for (var i = 0; i < data.result.sqlResults.length; i++) {
                    var result = data.result.sqlResults[i];
                    if (result.isRows==false) {
                        addOperateLog("受影响的行:" + result.count);
                    } else {
                        var tableHtml = '<div class="data-content"><table class="layui-hide gridTable" id="dataList-' + index + '" lay-filter="dataList-' + index + '"></table></div>';
                        setAddDataTab(index, "结果" + index, tableHtml);
                        var tableOptions = buildTable(result);
                        layui.table.init('dataList-' + index, tableOptions);
                        index++;
                    }
                }
            }
        }

        // 生成table
        function buildTable(dataTable) {
            var cols = [];
            for (var i = 0; i < dataTable.columns.length; i++) {
                var col = dataTable.columns[i];
                var width = getBLen(col) * 8 +16;
                width = width > 500 ? 500 : width;
                var c = { title: col, field: col, minWidth: width, width: width };
                cols.push(c);
            }
            var datas = [];
            for (var i = 0; i < dataTable.values.length; i++) {
                var vals = dataTable.values[i];
                var data = {};
                for (var j = 0; j < cols.length; j++) {
                    var val = vals[j];
                    data[cols[j].field] = HTMLEncode(val);
                    if (val) {
                        var width = getBLen(val) * 8 + 24;
                        width = width > 500 ? 500 : width;
                        if (cols[j].width < width) {
                            cols[j] = { title: cols[j].title, field: cols[j].field, width: width };
                        }
                    }
                }
                datas.push(data);
            }

            var tableOptions = {
                size: 'sm',
                even: true,
                cols: [cols],
                data: datas,
                cellMinWidth: 32,
                limit: datas.length > 0 ? datas.length:1,
                height: $("#footer").height() - $("#info-tab-title").height() - 25,
                text: { none: '<span style="color:red;">暂无记录</span>' }
            };
            return tableOptions;
        }

        function HTMLEncode(html) {
            if (html==null) { return html; }
            var temp = document.createElement("div");
            (temp.textContent != null) ? (temp.textContent = html) : (temp.innerText = html);
            var output = temp.innerHTML;
            temp = null;
            return output;
        }

        function getBLen(text) {
            var len = 0;
            for (var i = 0; i < text.length; i++) {
                if (text.charCodeAt(i) > 127 || text.charCodeAt(i) == 94) {
                    len += 1.5;
                } else {
                    len++;
                }
            }
            return len;
        }

    </script>

    @* 输出日志 拖动大小 *@
    <script>
        $(function () {
            var src_posi_Y = 0, is_mouse_down = false;
            $("#expander").mousedown(function (e) { src_posi_Y = e.pageY; is_mouse_down = true; });
            $(document).bind("click mouseup", function (e) {
                if (is_mouse_down) { is_mouse_down = false; }
            }).mousemove(function (e) {
                if (is_mouse_down) {
                    var dest_posi_Y = e.pageY;
                    var move_Y = src_posi_Y - dest_posi_Y;
                    src_posi_Y = dest_posi_Y;
                    var destHeight = $("#footer").height() + move_Y;
                    destHeight = destHeight > 50 ? destHeight : 50;
                    $("#footer").css("height", destHeight);
                    $("#content").height($("body").height() - $("#header").height() - destHeight);

                    var height = $("#footer").height() - $("#info-tab-title").height() - 25;
                    $("div[lay-id]").each(function () {
                        var txt = $(this).attr("lay-id");
                        if (txt.startsWith("dataList-")) {
                            layui.table.reload(txt, { height: height });
                        }
                    })
                }
            });
        });
    </script>

}

